#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Binary build"
on:
  release:
    types: [published]
  push:
    paths:
      - ".github/workflows/build.yaml"
      - "Cargo.toml"
      - "crates/**"
      - "macos/**"
      - "windows/**"
      - "deployments/**"
      - "freedesktop/**"
  pull_request_review:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  build-android-cli:
    name: "Build for Android (aarch64) for terminal"
    if: false  
    # Temporarily disable this job
    # To re-enable, change 'false' to 'true' or remove this line
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout 代码（含子模块）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. 获取 Git 版本号
      - name: Get git version
        id: git_tag_version
        run: |
          # 如果是 tag 直接使用，否则用 latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')
          else
            BUILD_VERSION="latest"
          fi
          echo "Build version: $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # 3. 安装系统依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config

      # 4. 下载并安装 Android NDK
      - name: Download and setup Android NDK
        run: |
          echo "Downloading Android NDK..."
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26b /opt/android-ndk
          echo "NDK installed to /opt/android-ndk"

          # 将 NDK 添加到 PATH
          echo "/opt/android-ndk" >> $GITHUB_PATH
          echo "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # 5. 安装 Rust 目标和 cargo-ndk
      - name: Install Rust target and cargo-ndk
        run: |
          rustup target install aarch64-linux-android
          cargo install cargo-ndk

      # 6. 使用 cargo-ndk 构建 Android 二进制
      - name: Build for Android (arm64-v8a)
        run: |
          cargo ndk -t arm64-v8a build --release -p wsrx

      # 7. 打包二进制文件
      - name: Package binary
        run: |
          mkdir -p release
          cp target/aarch64-linux-android/release/wsrx release/wsrx-android-aarch64
          tar -czf wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz -C release .
          echo "Package created: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz"

      # 8. 上传为 Artifact（每次构建都保留）
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-android-aarch64-${{ steps.git_tag_version.outputs.BUILD_VERSION }}
          path: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz

      # 9. 发布到 GitHub Release（仅在 tag 时触发）
      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release of `wsrx` CLI for Android (aarch64)."
          files: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz
          draft: false
          prerelease: false

  build-android-gui:
    name: "Build Android GUI App"
    runs-on: ubuntu-22.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Get current git tag version
      - name: Get git version
        id: git_tag_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')
          else
            BUILD_VERSION="latest"
          fi
          echo "Build at version $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # Setup Java 17 (required for recent Android SDK tools)
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # --- MANUAL SDK/NDK INSTALLATION ---
      # Instead of relying on android-actions/setup-android for installation,
      # we download and set up SDK/NDK manually to ensure completeness.
      - name: Install Android SDK Command-line Tools and NDK manually
        run: |
          # Define versions and paths
          SDK_TOOLS_VERSION="11076708" # cmdline-tools version
          # NDK_VERSION="25.1.8937393" # We will let sdkmanager handle this
          ANDROID_HOME="$HOME/android-sdk"
          SDK_TOOLS_ZIP="commandlinetools-linux-${SDK_TOOLS_VERSION}_latest.zip"
          # NDK_ZIP="android-ndk-${NDK_VERSION}-linux.zip" # Remove this

          echo "ANDROID_HOME will be: $ANDROID_HOME"

          # Create SDK directory
          mkdir -p "$ANDROID_HOME"

          # --- Install Command-line Tools ---
          echo "Downloading Android SDK Command-line Tools..."
          wget -q "https://dl.google.com/android/repository/${SDK_TOOLS_ZIP}" -O "$HOME/sdk-tools.zip"
          echo "Extracting SDK Command-line Tools..."
          mkdir -p "$HOME/sdk-tmp"
          unzip -q "$HOME/sdk-tools.zip" -d "$HOME/sdk-tmp"
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          mv "$HOME/sdk-tmp/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
          rm -f "$HOME/sdk-tools.zip"
          rm -rf "$HOME/sdk-tmp"

          # Add tools to PATH for this session and future steps
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV

          # Accept licenses
          echo "Accepting Android SDK licenses..."
          # Improved license acceptance to avoid "Broken pipe" warning
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses > /dev/null 2>&1 || true

          # --- Install essential SDK packages INCLUDING NDK ---
          # Add the NDK package to the list for sdkmanager to install
          echo "Installing essential SDK packages (platform-tools, platforms, build-tools, NDK)..."
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "ndk;25.1.8937393" \
            > /dev/null # Suppress output to reduce log size

          # --- Set NDK environment variables ---
          # After installation, determine the exact NDK path
          # sdkmanager usually installs it under $ANDROID_HOME/ndk/
          # List the contents to find the installed version directory
          if [ -d "$ANDROID_HOME/ndk" ]; then
            INSTALLED_NDK_DIR=$(ls -1 "$ANDROID_HOME/ndk" | head -n 1)
            if [ -n "$INSTALLED_NDK_DIR" ]; then
              echo "Found installed NDK directory: $INSTALLED_NDK_DIR"
              echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/$INSTALLED_NDK_DIR" >> $GITHUB_ENV
              echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/$INSTALLED_NDK_DIR" >> $GITHUB_ENV
            else
              echo "::error::NDK directory is empty after installation!"
              ls -la "$ANDROID_HOME/ndk/" || echo "Could not list NDK directory"
              exit 1
            fi
          else
            echo "::error::NDK directory was not created by sdkmanager!"
            ls -la "$ANDROID_HOME/" || echo "Could not list SDK root directory"
            exit 1
          fi

          # Explicitly unset ANDROID_SDK_ROOT to avoid deprecation warning and conflicts
          echo "ANDROID_SDK_ROOT=" >> $GITHUB_ENV

          # --- Verification ---
          if [ ! -d "$ANDROID_HOME/build-tools" ]; then
              echo "::error::build-tools directory NOT found!"
              ls -la "$ANDROID_HOME/" || echo "SDK root directory listing failed."
              exit 1
          else
              echo "::notice::build-tools directory found."
          fi

          NDK_SOURCE_PROPERTIES="$ANDROID_NDK_HOME/source.properties"
          if [ ! -f "$NDK_SOURCE_PROPERTIES" ]; then
              echo "::error::NDK source.properties NOT found at $NDK_SOURCE_PROPERTIES!"
              ls -la "$ANDROID_NDK_HOME/" || echo "NDK directory listing failed."
              exit 1
          else
              echo "::notice::NDK source.properties found."
          fi

          echo "::notice::Manual SDK/NDK installation and configuration completed successfully."
            # --- END MANUAL SDK/NDK INSTALLATION ---

      # Install system dependencies for GUI building
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            ninja-build \
            pkg-config \
            imagemagick \
            libfontconfig1-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev

      # Install Rust and Android targets
      - name: Install Rust and Android targets
        run: |
          rustup update stable && rustup default stable
          rustup target add aarch64-linux-android armv7-linux-androideabi

      # Install cargo-apk
      - name: Install cargo-apk
        run: |
          cargo install cargo-apk

      # Build APK for aarch64 (ARM64)
      - name: Build APK for aarch64
        run: |
          cd crates/desktop
          cargo apk build --release --target aarch64-linux-android
        # Environment variables are now set in GITHUB_ENV

      # Build APK for armv7 (ARM32)
      - name: Build APK for armv7
        run: |
          cd crates/desktop
          cargo apk build --release --target armv7-linux-androideabi
        # Environment variables are now set in GITHUB_ENV

      # Find and rename APKs with version
      - name: Find and rename APKs
        run: |
          mkdir -p release

          echo "🔍 Searching for APK files..."
          find . -name "*.apk" -type f | while read apk; do
            echo "Found APK: $apk"
            echo "Size: $(du -h "$apk" | cut -f1)"
          done

          # Find ARM64 APK
          ARM64_APK=$(find crates/desktop/target/aarch64-linux-android -name "*.apk" -type f | head -1)
          if [ -n "$ARM64_APK" ]; then
            cp "$ARM64_APK" "release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-arm64-v8a.apk"
            echo "✅ ARM64 APK: $ARM64_APK"
          else
            echo "❌ ARM64 APK not found"
          fi

          # Find ARM32 APK
          ARM32_APK=$(find crates/desktop/target/armv7-linux-androideabi -name "*.apk" -type f | head -1)
          if [ -n "$ARM32_APK" ]; then
            cp "$ARM32_APK" "release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-armeabi-v7a.apk"
            echo "✅ ARM32 APK: $ARM32_APK"
          else
            echo "❌ ARM32 APK not found"
          fi

          # List generated files for debugging
          echo "📦 Generated APK files:"
          ls -la release/ || echo "No files in release directory"

      # Upload APKs as artifacts
      - name: Upload APKs (Artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: android-gui-apks-${{ steps.git_tag_version.outputs.BUILD_VERSION }}
          path: release/*.apk

      # Upload to GitHub Release
      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-arm64-v8a.apk
            release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-armeabi-v7a.apk
