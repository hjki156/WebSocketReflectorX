#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Binary build"
on:
  release:
    types: [published]
  push:
    paths:
      - ".github/workflows/build.yaml"
      - "Cargo.toml"
      - "crates/**"
      - "macos/**"
      - "windows/**"
      - "deployments/**"
      - "freedesktop/**"
  pull_request_review:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  build-android-cli:
    name: "Build for Android (aarch64) for terminal"
    if: false  
    # Temporarily disable this job
    # To re-enable, change 'false' to 'true' or remove this line
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout 代码（含子模块）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. 获取 Git 版本号
      - name: Get git version
        id: git_tag_version
        run: |
          # 如果是 tag 直接使用，否则用 latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')
          else
            BUILD_VERSION="latest"
          fi
          echo "Build version: $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # 3. 安装系统依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config

      # 4. 下载并安装 Android NDK
      - name: Download and setup Android NDK
        run: |
          echo "Downloading Android NDK..."
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26b /opt/android-ndk
          echo "NDK installed to /opt/android-ndk"

          # 将 NDK 添加到 PATH
          echo "/opt/android-ndk" >> $GITHUB_PATH
          echo "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # 5. 安装 Rust 目标和 cargo-ndk
      - name: Install Rust target and cargo-ndk
        run: |
          rustup target install aarch64-linux-android
          cargo install cargo-ndk

      # 6. 使用 cargo-ndk 构建 Android 二进制
      - name: Build for Android (arm64-v8a)
        run: |
          cargo ndk -t arm64-v8a build --release -p wsrx

      # 7. 打包二进制文件
      - name: Package binary
        run: |
          mkdir -p release
          cp target/aarch64-linux-android/release/wsrx release/wsrx-android-aarch64
          tar -czf wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz -C release .
          echo "Package created: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz"

      # 8. 上传为 Artifact（每次构建都保留）
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-android-aarch64-${{ steps.git_tag_version.outputs.BUILD_VERSION }}
          path: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz

      # 9. 发布到 GitHub Release（仅在 tag 时触发）
      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release of `wsrx` CLI for Android (aarch64)."
          files: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz
          draft: false
          prerelease: false

  build-android-gui:
    name: Build Android GUI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config

      - name: Download and setup Android NDK
        run: |
          echo "Downloading Android NDK..."
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26b /opt/android-ndk
          echo "NDK installed to /opt/android-ndk"

          # 将 NDK 添加到 PATH
          echo "/opt/android-ndk" >> $GITHUB_PATH
          echo "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Install Rust target and cargo-ndk
        run: |
          rustup target install aarch64-linux-android
          cargo install cargo-ndk

      - name: Build Rust libraries
        run: |
          rustup target install aarch64-linux-android
          cargo ndk -t arm64-v8a -o ./android/app/src/main/jniLibs build --release

      - name: Build Android APK
        working-directory: ./android
        run: ./gradlew assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/*.apk
