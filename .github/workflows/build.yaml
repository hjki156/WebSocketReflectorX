#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: "Binary build"
on:
  release:
    types: [published]
  push:
    paths:
      - ".github/workflows/build.yaml"
      - "Cargo.toml"
      - "crates/**"
      - "macos/**"
      - "windows/**"
      - "deployments/**"
      - "freedesktop/**"
  pull_request_review:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

#-------------------------------------------------------------------------------
# Workflow jobs
#-------------------------------------------------------------------------------

jobs:
  build-android-cli:
    name: "Build for Android (aarch64) for terminal"
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout ‰ª£Á†ÅÔºàÂê´Â≠êÊ®°ÂùóÔºâ
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. Ëé∑Âèñ Git ÁâàÊú¨Âè∑
      - name: Get git version
        id: git_tag_version
        run: |
          # Â¶ÇÊûúÊòØ tag Áõ¥Êé•‰ΩøÁî®ÔºåÂê¶ÂàôÁî® latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')
          else
            BUILD_VERSION="latest"
          fi
          echo "Build version: $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # 3. ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config

      # 4. ‰∏ãËΩΩÂπ∂ÂÆâË£Ö Android NDK
      - name: Download and setup Android NDK
        run: |
          echo "Downloading Android NDK..."
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26b /opt/android-ndk
          echo "NDK installed to /opt/android-ndk"

          # Â∞Ü NDK Ê∑ªÂä†Âà∞ PATH
          echo "/opt/android-ndk" >> $GITHUB_PATH
          echo "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # 5. ÂÆâË£Ö Rust ÁõÆÊ†áÂíå cargo-ndk
      - name: Install Rust target and cargo-ndk
        run: |
          rustup target install aarch64-linux-android
          cargo install cargo-ndk

      # 6. ‰ΩøÁî® cargo-ndk ÊûÑÂª∫ Android ‰∫åËøõÂà∂
      - name: Build for Android (arm64-v8a)
        run: |
          cargo ndk -t arm64-v8a build --release -p wsrx

      # 7. ÊâìÂåÖ‰∫åËøõÂà∂Êñá‰ª∂
      - name: Package binary
        run: |
          mkdir -p release
          cp target/aarch64-linux-android/release/wsrx release/wsrx-android-aarch64
          tar -czf wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz -C release .
          echo "Package created: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz"

      # 8. ‰∏ä‰º†‰∏∫ ArtifactÔºàÊØèÊ¨°ÊûÑÂª∫ÈÉΩ‰øùÁïôÔºâ
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsrx-cli-android-aarch64-${{ steps.git_tag_version.outputs.BUILD_VERSION }}
          path: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz

      # 9. ÂèëÂ∏ÉÂà∞ GitHub ReleaseÔºà‰ªÖÂú® tag Êó∂Ëß¶ÂèëÔºâ
      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release of `wsrx` CLI for Android (aarch64)."
          files: wsrx-cli-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-aarch64.tar.gz
          draft: false
          prerelease: false

  build-android-gui:
    name: "Build Android GUI App"
    runs-on: ubuntu-22.04
    steps:
      # Checkout repository (and submodules)
      - name: Checkout repository (and submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Get current git tag version
      - name: Get git version
        id: git_tag_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_VERSION=$(echo $GITHUB_REF | sed 's|refs/tags/||')
          else
            BUILD_VERSION="latest"
          fi
          echo "Build at version $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT

      # Setup Java 17 (required for recent Android SDK tools)
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Android SDK & NDK with proper NDK version and configure environment
      - name: Install Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 11076708
          ndk-version: 25.1.8937393
        # Use 'run:' section to configure environment variables after SDK/NDK installation
      - name: Configure environment variables
        run: |
          # Verify ANDROID_HOME is set by the action
          if [ -z "$ANDROID_HOME" ]; then
            echo "::error::ANDROID_HOME is not set by the setup-android action!"
            exit 1
          fi
          echo "ANDROID_HOME is set to: $ANDROID_HOME"
          
          # Check if source.properties exists in ANDROID_HOME (SDK root)
          if [ ! -f "$ANDROID_HOME/source.properties" ]; then
            echo "::warning::source.properties not found in ANDROID_HOME ($ANDROID_HOME). This might cause issues."
            # List contents for debugging
            echo "Contents of ANDROID_HOME:"
            ls -la "$ANDROID_HOME" || echo "Could not list ANDROID_HOME"
          fi

          # Set NDK environment variables pointing to the installed NDK version within ANDROID_HOME
          echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
          
          # Ensure ANDROID_HOME is correctly set in GITHUB_ENV (redundant but safe)
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          
          # Explicitly unset the deprecated ANDROID_SDK_ROOT to prevent conflicts
          # We set it to empty string in GITHUB_ENV to override any previous value
          echo "ANDROID_SDK_ROOT=" >> $GITHUB_ENV
          # Also unset it for the current shell session
          unset ANDROID_SDK_ROOT
          
          # Optional: Debug output to verify variables
          echo "::debug::ANDROID_HOME=$ANDROID_HOME"
          echo "::debug::ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" # This will show the value from the *current* shell, which should be set now
          echo "::debug::ANDROID_NDK_HOME=$ANDROID_NDK_HOME"

      # Install system dependencies for GUI building
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            ninja-build \
            pkg-config \
            imagemagick \
            libfontconfig1-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev

      # Install Rust and Android targets
      - name: Install Rust and Android targets
        run: |
          rustup update stable && rustup default stable
          rustup target add aarch64-linux-android armv7-linux-androideabi # Added both targets here

      # Install cargo-apk
      - name: Install cargo-apk
        run: |
          cargo install cargo-apk

      # Build APK for aarch64 (ARM64)
      - name: Build APK for aarch64
        run: |
          cd crates/desktop
          cargo apk build --release --target aarch64-linux-android
        # Removed 'env:' section as variables are now in GITHUB_ENV

      # Build APK for armv7 (ARM32)
      - name: Build APK for armv7
        run: |
          cd crates/desktop
          cargo apk build --release --target armv7-linux-androideabi
        # Removed 'env:' section as variables are now in GITHUB_ENV

      # Find and rename APKs with version
      - name: Find and rename APKs
        run: |
          mkdir -p release

          echo "üîç Searching for APK files..."
          find . -name "*.apk" -type f | while read apk; do
            echo "Found APK: $apk"
            echo "Size: $(du -h "$apk" | cut -f1)"
          done

          # Find ARM64 APK
          ARM64_APK=$(find crates/desktop/target/aarch64-linux-android -name "*.apk" -type f | head -1)
          if [ -n "$ARM64_APK" ]; then
            cp "$ARM64_APK" "release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-arm64-v8a.apk"
            echo "‚úÖ ARM64 APK: $ARM64_APK"
          else
            echo "‚ùå ARM64 APK not found"
          fi

          # Find ARM32 APK
          ARM32_APK=$(find crates/desktop/target/armv7-linux-androideabi -name "*.apk" -type f | head -1)
          if [ -n "$ARM32_APK" ]; then
            cp "$ARM32_APK" "release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-armeabi-v7a.apk"
            echo "‚úÖ ARM32 APK: $ARM32_APK"
          else
            echo "‚ùå ARM32 APK not found"
          fi

          # List generated files for debugging
          echo "üì¶ Generated APK files:"
          ls -la release/ || echo "No files in release directory"

      # Upload APKs as artifacts
      - name: Upload APKs (Artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: android-gui-apks-${{ steps.git_tag_version.outputs.BUILD_VERSION }}
          path: release/*.apk

      # Upload to GitHub Release
      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-arm64-v8a.apk
            release/WebSocketReflectorX-${{ steps.git_tag_version.outputs.BUILD_VERSION }}-android-armeabi-v7a.apk